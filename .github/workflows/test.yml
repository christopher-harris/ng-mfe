name: frontend workflow

on:
  pull_request:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [14.16.0]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-cache-${{ hashFiles('**/yarn.lock') }}
      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: git fetch --no-tags --prune --depth=5 origin main
      - name: install dependencies
        if: steps.cache-node-modules.cache-hit != 'true'
        run: yarn install --frozen-lockfile

  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-cache-${{ hashFiles('**/yarn.lock') }}
      - name: build affected
        run: nx run affected:build --base=origin/main

  lint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-cache-${{ hashFiles('**/yarn.lock') }}
      - name: lint affected
        run: nx run affected:lint --base=origin/main

  test:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-cache-${{ hashFiles('**/yarn.lock') }}
      - name: unit test affected
        run: nx run affected:test --base=origin/main






#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#    name: Build and Test
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        node-version: [14.x]
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
#
#    - name: Install yarn
#      run: npm install -g yarn
#
#    - name: Get yarn cache directory path
#      id: yarn-cache-dir-path
#      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
#
#    - name: Cache yarn dependencies
#      uses: actions/cache@v2
#      id: yarn-cache
#      with:
#        path: |
#          ${{ steps.yarn-cache-dir-path.outputs.dir }}
#          **\node_modules
#        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#        restore-keys: |
#          ${{ runner.os }}-yarn-
#
#    - name: Install dependencies
#      if: steps.yarn-cache.outputs.cache-hit != 'true'
#      run: yarn install
#
#    - name: Test
#      run: |
#        RUN=CI yarn nx run-many --target=test --all --parallel 5
#        yarn nx run-many --target=lint --all
#        yarn nx run-many --target=build --all --prod

#    - name: Install dependencies
#      run: npm ci
#    - name: Build
#      run: npm run build:dashboard

#    - name: Deploy to GitHub Pages
#      uses: JamesIves/github-pages-deploy-action@releases/v3
#      with:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        BRANCH: gh-pages
#        FOLDER: deploy_dist/dashboard
